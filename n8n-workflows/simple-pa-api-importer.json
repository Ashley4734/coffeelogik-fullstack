{
  "name": "Simple Amazon Product Importer",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "simple-import",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "simple-import"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "asin",
              "name": "asin", 
              "value": "={{ $json.asin }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "extract-asin",
      "name": "Extract ASIN",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [460, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://webservices.amazon.com/paapi5/getitems",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "X-Amz-Target",
              "value": "com.amazon.paapi5.v1.ProductAdvertisingAPIv1.GetItems"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"ItemIds\": [\"{{ $json.asin }}\"],\n  \"Resources\": [\n    \"Images.Primary.Large\",\n    \"ItemInfo.Title\",\n    \"ItemInfo.Features\", \n    \"Offers.Listings.Price\",\n    \"CustomerReviews.StarRating\",\n    \"CustomerReviews.Count\"\n  ],\n  \"PartnerTag\": \"{{ $env.AMAZON_PARTNER_TAG }}\",\n  \"PartnerType\": \"Associates\",\n  \"Marketplace\": \"www.amazon.com\"\n}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "aws",
        "options": {}
      },
      "id": "amazon-api-call",
      "name": "Amazon PA API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Simple product data extraction\nconst response = $input.first().json;\nconst items = response.ItemsResult?.Items || [];\n\nif (items.length === 0) {\n  return [{ json: { error: `Product not found for ASIN: ${$node[\"Extract ASIN\"].json.asin}` } }];\n}\n\nconst item = items[0];\nconst itemInfo = item.ItemInfo || {};\nconst offers = item.Offers?.Listings?.[0] || {};\nconst reviews = item.CustomerReviews || {};\n\n// Extract basic product data\nconst product = {\n  asin: item.ASIN,\n  title: itemInfo.Title?.DisplayValue || 'Unknown Product',\n  brand: itemInfo.ByLineInfo?.Brand?.DisplayValue || 'Unknown Brand',\n  description: itemInfo.Features?.DisplayValues?.join('. ') || '',\n  price: offers.Price?.Amount || 0,\n  currency: offers.Price?.Currency || 'USD',\n  rating: reviews.StarRating?.Value || 0,\n  reviewCount: reviews.Count || 0,\n  imageUrl: item.Images?.Primary?.Large?.URL || ''\n};\n\n// Simple product type detection\nconst title = product.title.toLowerCase();\nlet productType = 'Coffee Beans';\n\nif (title.includes('machine') || title.includes('espresso')) {\n  productType = 'Espresso Machine';\n} else if (title.includes('grinder')) {\n  productType = 'Coffee Grinder';\n} else if (title.includes('dripper') || title.includes('pour over')) {\n  productType = 'Brewing Equipment';\n} else if (title.includes('ground')) {\n  productType = 'Ground Coffee';\n}\n\nproduct.productType = productType;\n\n// Simple slug generation\nproduct.slug = product.title\n  .toLowerCase()\n  .replace(/[^a-z0-9\\s-]/g, '')\n  .replace(/\\s+/g, '-')\n  .substring(0, 50);\n\nreturn [{ json: product }];"
      },
      "id": "process-data",
      "name": "Process Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "message",
        "model": "gpt-3.5-turbo",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a coffee expert. Rewrite product descriptions and create pros/cons lists. Respond only with valid JSON."
            },
            {
              "role": "user",
              "content": "Product: {{ $json.title }}\\nOriginal: {{ $json.description }}\\n\\nCreate JSON with:\\n- description (2 paragraphs, engaging)\\n- pros (5 items)\\n- cons (3 items)\\n- flavorNotes (for coffee only, 3-5 items)"
            }
          ]
        },
        "options": {}
      },
      "id": "ai-content",
      "name": "AI Content",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Combine data for Strapi\nconst productData = $node[\"Process Data\"].json;\nconst aiResponse = $input.first().json;\n\nlet aiContent;\ntry {\n  aiContent = JSON.parse(aiResponse.content);\n} catch (e) {\n  // Fallback if AI response isn't valid JSON\n  aiContent = {\n    description: productData.description || 'High-quality coffee product.',\n    pros: ['Great quality', 'Good value', 'Popular choice', 'Reliable brand', 'Fast shipping'],\n    cons: ['Premium pricing', 'May vary in taste', 'Packaging could improve'],\n    flavorNotes: ['Rich', 'Smooth', 'Balanced']\n  };\n}\n\n// Create final Strapi product\nconst strapiProduct = {\n  name: productData.title,\n  slug: productData.slug,\n  brand: productData.brand,\n  product_type: productData.productType,\n  description: aiContent.description || productData.description,\n  price: parseFloat(productData.price) || 0,\n  rating: parseFloat(productData.rating) || 0,\n  pros: aiContent.pros || [],\n  cons: aiContent.cons || [],\n  flavor_notes: aiContent.flavorNotes || [],\n  affiliate_link: `https://amazon.com/dp/${productData.asin}?tag=${$env.AMAZON_PARTNER_TAG}`,\n  featured: productData.rating > 4.5,\n  amazon_asin: productData.asin,\n  amazon_last_updated: new Date().toISOString()\n};\n\nreturn [{ json: strapiProduct }];"
      },
      "id": "prepare-strapi",
      "name": "Prepare Strapi",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.STRAPI_URL }}/api/coffee-products",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.STRAPI_API_TOKEN }}"
            },
            {
              "name": "Content-Type", 
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"data\": {{ JSON.stringify($json) }} }",
        "options": {}
      },
      "id": "create-product",
      "name": "Create Product",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Product imported successfully\",\n  \"product\": {\n    \"id\": {{ $json.data.id }},\n    \"name\": \"{{ $json.data.name }}\",\n    \"brand\": \"{{ $json.data.brand }}\",\n    \"price\": {{ $json.data.price }},\n    \"asin\": \"{{ $json.data.amazon_asin }}\"\n  }\n}",
        "options": {}
      },
      "id": "success-response",
      "name": "Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.error }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "check-errors",
      "name": "Check Errors",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"error\": \"{{ $json.error }}\",\n  \"asin\": \"{{ $node[\\\"Extract ASIN\\\"].json.asin }}\"\n}",
        "responseCode": 400,
        "options": {}
      },
      "id": "error-response",
      "name": "Error Response", 
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 500]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract ASIN",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract ASIN": {
      "main": [
        [
          {
            "node": "Amazon PA API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Amazon PA API": {
      "main": [
        [
          {
            "node": "Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Data": {
      "main": [
        [
          {
            "node": "AI Content",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Content": {
      "main": [
        [
          {
            "node": "Prepare Strapi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Strapi": {
      "main": [
        [
          {
            "node": "Create Product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Product": {
      "main": [
        [
          {
            "node": "Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Errors": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["amazon", "simple", "coffee"],
  "triggerCount": 1,
  "updatedAt": "2025-06-20T16:30:00.000Z",
  "versionId": "1"
}